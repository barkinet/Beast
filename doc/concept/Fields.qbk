[/
    Copyright (c) 2013-2017 Vinnie Falco (vinnie dot falco at gmail dot com)

    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:Fields Fields]

An instance of [*Fields] is a container for holding HTTP header fields
and their values. The implementation also calls upon the container to
store the request target and non-standard strings for method and obsolete
reason phrase as needed. Types which meet these requirements can always
be serialized.

[heading Associated Types]

* __FieldsReader__

* [link beast.ref.beast__http__is_fields `is_fields`]

[heading Requirements]

In this table:

* `F` denotes a type that meets the requirements of [*Fields].

* `R` denotes a type meeting the requirements of __FieldsReader__.

* `a` denotes a value of type `F`.

* `c` denotes a (possibly const) value of type `F`.

* `b` is a value of type `bool`

* `n` is a value of type `boost::optional<std::uint64_t>`.

* `s` is a value of type [link beast.ref.beast__string_view `string_view`].

* `v` is a value of type `unsigned int` representing the HTTP-version.

[table Valid expressions
[[Expression] [Type] [Semantics, Pre/Post-conditions]]
[
    [`F::reader`]
    [`R`]
    [
        A type which meets the requirements of __FieldsReader__.
    ]
][
    [`c.get_method_impl()`]
    [`string_view`]
    [
        Returns the method text.
        The implementation only calls this function for request
        headers when retrieving the method text previously set
        with a call to `set_method_impl` using a non-empty string.
    ]
][
    [`c.get_target_impl()`]
    [`string_view`]
    [
        Returns the target string.
        The implementation only calls this function for request headers.
    ]
][
    [`c.get_reason_impl()`]
    [`string_view`]
    [
        Returns the obsolete request text.
        The implementation only calls this for response headers when
        retrieving the reason text previously set with a call to
        `set_reason_impl` using a non-empty string.
    ]
][
    [`c.get_keep_alive_impl(v)`]
    [`bool`]
    [
        Returns `true` if the semantics of the Connection field and
        version indicate that the connection should remain open after
        the corresponding response is transmitted or received:

        [itemized_list
        [
            If `(v < 11)` the function returns `true` if the "keep-alive"
            token is present in the Connection field value. Otherwise the
            function returns `false`.
        ][
            If `(v == 11)`, the function returns `false` if the "close"
            token is present in the Connection field value. Otherwise the
            function returns `true`.
        ]]
    ]
][
    [`a.set_method_impl(s)`]
    []
    [
        Stores a copy of `s` as the method text, or erases the previously
        stored value if `s` is empty.
        The implementation only calls this function for request headers.
        This function may throw `std::invalid_argument` if the operation
        is not supported by the container.
    ]
][
    [`a.set_target_impl(s)`]
    []
    [
        Stores a copy of `s` as the target, or erases the previously
        stored value if `s` is empty.
        The implementation only calls this function for request headers.
        This function may throw `std::invalid_argument` if the operation
        is not supported by the container.
    ]
][
    [`a.set_reason_impl(s)`]
    []
    [
        Stores a copy of `s` as the reason text, or erases the previously
        stored value of the reason text if `s` is empty.
        The implementation only calls this function for request headers.
        This function may throw `std::invalid_argument` if the operation
        is not supported by the container.
    ]
][
    [`a.set_keep_alive_impl(v, b)`]
    []
    [
        Adjusts the Connection field value depending on the values of `v`
        and `b`. The field value is treated as
        [@https://tools.ietf.org/html/rfc7230#section-6.1 ['connection-option]]
        (rfc7230).

        [itemized_list
        [
            If `(v < 11 && b)`, then all "close" tokens present in the
            value are removed, and the "keep-alive" token is added to
            the valueif it is not already present.
        ][
            If `(v < 11 && ! b)`, then all "close" and "keep-alive"
            tokens present in the value are removed.

        ][
            If `(v == 11 && b)`, then all "keep-alive" and "close"
            tokens present in the value are removed.
        ][
            If `(v == 11 && ! b)`, then all "keep-alive" tokens present
            in the value are removed, and the "close" token is added to
            the value if it is not already present.
        ]]
    ]
][
    [`a.prepare_payload_impl(b,n)`]
    []
    [
        Adjusts the Content-Length and Transfer-Encoding fields to
        account for the payload metadata indicated by `b` and `n` as
        follows. The Transfer-Encoding field value is treated as
        [@https://tools.ietf.org/html/rfc7230#section-3.3.1 ['1#transfer-coding]]
        (rfc7230).

        [itemized_list
        [
            If `(b)`, the "chunked" token is apppended
            to the list of encodings if not already at the end.
            Any Content-Length fields are be removed.
        ][
            If `(! b && n)`, set the
            Content-Length field to `*n`, replacing any previous
            Content-Length fields. Remove the "chunked" token from
            the Transfer-Encoding field if the token is present as
            the last item.
        ][
            If `(! b && ! n)`, remove all Content-Length fields,
            and remove the "chunked" token from the  Transfer-Encoding
            field if the token is present as the last item.
        ]]
    ]
]
]

[heading Exemplar]

[concept_Fields]

[heading Models]

* [link beast.ref.beast__http__basic_fields `basic_fields`]
* [link beast.ref.beast__http__fields `fields`]

[endsect]
